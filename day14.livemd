# Day 14: Regolith Reservoir

```elixir
Mix.install([{:kino, "~> 0.8.0"}])
```

## Input

```elixir
input = Kino.Input.textarea("Please paste your input:")
```

```elixir
defmodule Day14Shared do
  def parse(input) do
    input
    |> Kino.Input.read()
    |> String.split("\n")
    |> Enum.map(fn raw_scan ->
      raw_scan
      |> String.split(" -> ")
      |> Enum.map(fn raw_points ->
        raw_points
        |> String.split(",")
        |> Enum.map(&String.to_integer/1)
        |> List.to_tuple()
      end)
    end)
    |> generate_cave()
  end

  def generate_cave(rocks) do
    meta_info = get_meta(rocks)

    Enum.reduce(rocks, %{meta: meta_info}, fn rock_points, cave ->
      rock_points
      |> Enum.chunk_every(2, 1, :discard)
      |> Enum.reduce(cave, fn [start, finish], cave ->
        rock_line(cave, start, finish)
      end)
    end)
  end

  defp get_meta(rocks) do
    all_rocks = Enum.flat_map(rocks, & &1)
    all_x = Enum.map(all_rocks, &elem(&1, 0))
    all_y = Enum.map(all_rocks, &elem(&1, 1))

    %{
      min_x: Enum.min(all_x),
      max_x: Enum.max(all_x),
      max_y: Enum.max(all_y)
    }
  end

  defp rock_line(cave, {x, s_y}, {x, f_y}),
    do: Enum.reduce(f_y..s_y, cave, &Map.put(&2, {x, &1}, :rock))

  defp rock_line(cave, {s_x, y}, {f_x, y}),
    do: Enum.reduce(s_x..f_x, cave, &Map.put(&2, {&1, y}, :rock))

  def render(cave, opts \\ [with_floor: false]) do
    with_floor = Keyword.get(opts, :with_floor)

    # we have to draw the full canvas (sand can go beyond initial edges in Part 2)
    # so we collect all the available points from the cave map to find new edges
    all_points = Map.keys(cave) |> Enum.reject(&(&1 == :meta))
    min_x = Enum.map(all_points, &elem(&1, 0)) |> Enum.min()
    max_x = Enum.map(all_points, &elem(&1, 0)) |> Enum.max()
    max_y = if with_floor, do: cave.meta[:max_y] + 2, else: cave.meta[:max_y]

    Enum.map(0..max_y, fn y ->
      Enum.map(min_x..max_x, fn x ->
        if with_floor do
          if y < max_y, do: tile(cave, {x, y}), else: "#"
        else
          tile(cave, {x, y})
        end
      end)
      |> Enum.join()
    end)
    |> Enum.join("\n")
    |> IO.puts()

    cave
  end

  defp tile(cave, coord) do
    case Map.get(cave, coord, :air) do
      :rock -> "#"
      :sand -> "o"
      :air -> "."
    end
  end
end

# Day14Shared.parse(input)
# |> Day14Shared.render(with_floor: true)
```

## Part 1

The distress signal leads you to a giant waterfall! Actually, hang on - the signal seems like it's coming from the waterfall itself, and that doesn't make any sense. However, you do notice a little path that leads **behind** the waterfall.

Correction: the distress signal leads you behind a giant waterfall! There seems to be a large cave system here, and the signal definitely leads further inside.

As you begin to make your way deeper underground, you feel the ground rumble for a moment. Sand begins pouring into the cave! If you don't quickly figure out where the sand is going, you could quickly become trapped!

Fortunately, your [familiarity](https://adventofcode.com/2018/day/17) with analyzing the path of falling material will come in handy here. You scan a two-dimensional vertical slice of the cave above you (your puzzle input) and discover that it is mostly **air** with structures made of **rock**.

Your scan traces the path of each solid rock structure and reports the `x,y` coordinates that form the shape of the path, where `x` represents distance to the right and `y` represents distance down. Each path appears as a single line of text in your scan. After the first point of each path, each point indicates the end of a straight horizontal or vertical line to be drawn from the previous point. For example:

```
498,4 -> 498,6 -> 496,6
503,4 -> 502,4 -> 502,9 -> 494,9
```

This scan means that there are two paths of rock; the first path consists of two straight lines, and the second path consists of three straight lines. (Specifically, the first path consists of a line of rock from `498,4` through `498,6` and another line of rock from `498,6` through `496,6`.)

The sand is pouring into the cave from point `500,0`.

Drawing rock as `#`, air as `.`, and the source of the sand as `+`, this becomes:

```

  4     5  5
  9     0  0
  4     0  3
0 ......+...
1 ..........
2 ..........
3 ..........
4 ....#...##
5 ....#...#.
6 ..###...#.
7 ........#.
8 ........#.
9 #########.
```

Sand is produced **one unit at a time**, and the next unit of sand is not produced until the previous unit of sand **comes to rest**. A unit of sand is large enough to fill one tile of air in your scan.

A unit of sand always falls **down one step** if possible. If the tile immediately below is blocked (by rock or sand), the unit of sand attempts to instead move diagonally **one step down and to the left**. If that tile is blocked, the unit of sand attempts to instead move diagonally **one step down and to the right**. Sand keeps moving as long as it is able to do so, at each step trying to move down, then down-left, then down-right. If all three possible destinations are blocked, the unit of sand **comes to rest** and no longer moves, at which point the next unit of sand is created back at the source.

So, drawing sand that has come to rest as `o`, the first unit of sand simply falls straight down and then stops:

```
......+...
..........
..........
..........
....#...##
....#...#.
..###...#.
........#.
......o.#.
#########.
```

The second unit of sand then falls straight down, lands on the first one, and then comes to rest to its left:

```
......+...
..........
..........
..........
....#...##
....#...#.
..###...#.
........#.
.....oo.#.
#########.
```

After a total of five units of sand have come to rest, they form this pattern:

```
......+...
..........
..........
..........
....#...##
....#...#.
..###...#.
......o.#.
....oooo#.
#########.
```

After a total of 22 units of sand:

```
......+...
..........
......o...
.....ooo..
....#ooo##
....#ooo#.
..###ooo#.
....oooo#.
...ooooo#.
#########.
```

Finally, only two more units of sand can possibly come to rest:

```
......+...
..........
......o...
.....ooo..
....#ooo##
...o#ooo#.
..###ooo#.
....oooo#.
.o.ooooo#.
#########.
```

Once all **24** units of sand shown above have come to rest, all further sand flows out the bottom, falling into the endless void. Just for fun, the path any new sand takes before falling forever is shown here with `~`:

```
.......+...
.......~...
......~o...
.....~ooo..
....~#ooo##
...~o#ooo#.
..~###ooo#.
..~..oooo#.
.~o.ooooo#.
~#########.
~..........
~..........
~..........
```

Using your scan, simulate the falling sand. **How many units of sand come to rest before sand starts flowing into the abyss below?**

```elixir
defmodule Day14Part1 do
  @drop_from {500, 0}

  @doc """
  Take the maximum available area to fill with sand, then simulate filling until
  sand reaches the abyss. On early exit (:halt), we return number of steps we had
  to make to reach the abyss.
  """
  def fill_with_sand(%{meta: meta} = cave) do
    max_area_to_fill = (meta.max_x - meta.min_x) * meta.max_y

    Enum.reduce_while(0..(max_area_to_fill - 1), cave, fn i, cave ->
      # Just a bit of debug visualisation, every few steps...
      if rem(i, 5) == 0 do
        IO.puts("== Step #{i} ==")
        Day14Shared.render(cave)
      end

      case land_sand(cave, @drop_from) do
        :abyss -> {:halt, i}
        updated_cave -> {:cont, updated_cave}
      end
    end)
  end

  def land_sand(cave, {x, y} = coord) do
    possible_moves = [{x, y + 1}, {x - 1, y + 1}, {x + 1, y + 1}]
    move_to = Enum.filter(possible_moves, &(Map.get(cave, &1) == nil))

    if length(move_to) == 0 do
      # when there are no possible moves, it means that unit of sand can rest,
      # so we mark this coordinate in the cave map
      Map.put(cave, coord, :sand)
    else
      next_to = hd(move_to)

      # we need to check if a unit of sand going over the edge of a cave
      if is_abyss?(cave, next_to) do
        :abyss
      else
        land_sand(cave, next_to)
      end
    end
  end

  defp is_abyss?(%{meta: meta}, {x, y}),
    do: x < meta.min_x || x > meta.max_x || y < 0 || y > meta.max_y
end

input
|> Day14Shared.parse()
|> Day14Part1.fill_with_sand()
```

## Part 2

You realize you misread the scan. There isn't an endless void at the bottom of the scan - there's floor, and you're standing on it!

You don't have time to scan the floor, so assume the floor is an infinite horizontal line with a `y` coordinate equal to **two plus the highest `y` coordinate** of any point in your scan.

In the example above, the highest `y` coordinate of any point is `9`, and so the floor is at `y=11`. (This is as if your scan contained one extra rock path like `-infinity,11 -> infinity,11`.) With the added floor, the example above now looks like this:

```
       ...........+........
        ....................
        ....................
        ....................
        .........#...##.....
        .........#...#......
        .......###...#......
        .............#......
        .............#......
        .....#########......
        ....................
<-- etc #################### etc -->
```

To find somewhere safe to stand, you'll need to simulate falling sand until a unit of sand comes to rest at 500,0, blocking the source entirely and stopping the flow of sand into the cave. In the example above, the situation finally looks like this after 93 units of sand come to rest:

```
............o............
...........ooo...........
..........ooooo..........
.........ooooooo.........
........oo#ooo##o........
.......ooo#ooo#ooo.......
......oo###ooo#oooo......
.....oooo.oooo#ooooo.....
....oooooooooo#oooooo....
...ooo#########ooooooo...
..ooooo.......ooooooooo..
#########################
```

Using your scan, simulate the falling sand until the source of the sand becomes blocked. **How many units of sand come to rest?**

```elixir
defmodule Day14Part2 do
  @drop_from {500, 0}

  def fill_with_sand(%{meta: meta} = cave) do
    max_area_to_fill = (meta.max_x - meta.min_x) * meta.max_y

    Enum.reduce_while(1..(max_area_to_fill ** 2), cave, fn i, cave ->
      # Just a bit of debug visualisation, every few steps...
      if rem(i, 1000) == 0 do
        IO.puts("== Step #{i} ==")
        Day14Shared.render(cave, with_floor: true)
      end

      case land_sand(cave, @drop_from) do
        @drop_from -> {:halt, i}
        coord -> {:cont, Map.put(cave, coord, :sand)}
      end
    end)
  end

  def land_sand(cave, {x, y} = coord) do
    possible_moves = [{x, y + 1}, {x - 1, y + 1}, {x + 1, y + 1}]
    move_to = Enum.filter(possible_moves, &(Map.get(cave, &1) == nil))

    if length(move_to) == 0 do
      coord
    else
      next_to = hd(move_to)

      # we need to check if a unit of sand reached our imaginary floor
      if is_floor?(cave, next_to) do
        coord
      else
        land_sand(cave, next_to)
      end
    end
  end

  defp is_floor?(%{meta: meta}, {_, y}), do: y >= meta.max_y + 2
end

input
|> Day14Shared.parse()
|> Day14Part2.fill_with_sand()
```
