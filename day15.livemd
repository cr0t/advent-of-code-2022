# Day 15: Beacon Exclusion Zone

```elixir
Mix.install([{:kino, "~> 0.8.0"}])
```

## Input

```elixir
input = Kino.Input.textarea("Please paste your input:")
```

```elixir
defmodule Day15Shared do
  def parse(input) do
    coords =
      input
      |> Kino.Input.read()
      |> String.split("\n")
      |> Enum.map(fn raw ->
        scan_ex = ~r/x=(-?\d+), y=(-?\d+):.+x=(-?\d+), y=(-?\d+)$/
        [_, s_x, s_y, b_x, b_y] = Regex.run(scan_ex, raw)
        [s_x, s_y, b_x, b_y] = Enum.map([s_x, s_y, b_x, b_y], &String.to_integer/1)

        {{s_x, s_y}, {b_x, b_y}}
      end)

    sensors = Enum.into(coords, %{})

    beacons =
      Enum.reduce(coords, %{}, fn {s, b}, bs ->
        Map.update(bs, b, [s], &[s | &1])
      end)

    [sensors: sensors, beacons: beacons]
  end

  def distance({x_1, y_1}, {x_2, y_2}),
    do: abs(x_1 - x_2) + abs(y_1 - y_2)
end

# Day15Shared.parse(input)
```

## Part 1

You feel the ground rumble again as the distress signal leads you to a large network of subterranean tunnels. You don't have time to search them all, but you don't need to: your pack contains a set of deployable **sensors** that you imagine were originally built to locate lost Elves.

The sensors aren't very powerful, but that's okay; your handheld device indicates that you're close enough to the source of the distress signal to use them. You pull the emergency sensor system out of your pack, hit the big button on top, and the sensors zoom off down the tunnels.

Once a sensor finds a spot it thinks will give it a good reading, it attaches itself to a hard surface and begins monitoring for the nearest signal source **beacon**. Sensors and beacons always exist at integer coordinates. Each sensor knows its own position and can **determine the position of a beacon precisely**; however, sensors can only lock on to the one beacon **closest to the sensor** as measured by the [Manhattan distance](https://en.wikipedia.org/wiki/Taxicab_geometry). (There is never a tie where two beacons are the same distance to a sensor.)

It doesn't take long for the sensors to report back their positions and closest beacons (your puzzle input). For example:

```
Sensor at x=2, y=18: closest beacon is at x=-2, y=15
Sensor at x=9, y=16: closest beacon is at x=10, y=16
Sensor at x=13, y=2: closest beacon is at x=15, y=3
Sensor at x=12, y=14: closest beacon is at x=10, y=16
Sensor at x=10, y=20: closest beacon is at x=10, y=16
Sensor at x=14, y=17: closest beacon is at x=10, y=16
Sensor at x=8, y=7: closest beacon is at x=2, y=10
Sensor at x=2, y=0: closest beacon is at x=2, y=10
Sensor at x=0, y=11: closest beacon is at x=2, y=10
Sensor at x=20, y=14: closest beacon is at x=25, y=17
Sensor at x=17, y=20: closest beacon is at x=21, y=22
Sensor at x=16, y=7: closest beacon is at x=15, y=3
Sensor at x=14, y=3: closest beacon is at x=15, y=3
Sensor at x=20, y=1: closest beacon is at x=15, y=3
```

So, consider the sensor at `2,18`; the closest beacon to it is at `-2,15`. For the sensor at `9,16`, the closest beacon to it is at `10,16`.

Drawing sensors as `S` and beacons as `B`, the above arrangement of sensors and beacons looks like this:

```
              1    1    2    2
     0    5    0    5    0    5
 0 ....S.......................
 1 ......................S.....
 2 ...............S............
 3 ................SB..........
 4 ............................
 5 ............................
 6 ............................
 7 ..........S.......S.........
 8 ............................
 9 ............................
10 ....B.......................
11 ..S.........................
12 ............................
13 ............................
14 ..............S.......S.....
15 B...........................
16 ...........SB...............
17 ................S..........B
18 ....S.......................
19 ............................
20 ............S......S........
21 ............................
22 .......................B....
```

This isn't necessarily a comprehensive map of all beacons in the area, though. Because each sensor only identifies its closest beacon, if a sensor detects a beacon, you know there are no other beacons that close or closer to that sensor. There could still be beacons that just happen to not be the closest beacon to any sensor. Consider the sensor at `8,7`:

```
               1    1    2    2
     0    5    0    5    0    5
-2 ..........#.................
-1 .........###................
 0 ....S...#####...............
 1 .......#######........S.....
 2 ......#########S............
 3 .....###########SB..........
 4 ....#############...........
 5 ...###############..........
 6 ..#################.........
 7 .#########S#######S#........
 8 ..#################.........
 9 ...###############..........
10 ....B############...........
11 ..S..###########............
12 ......#########.............
13 .......#######..............
14 ........#####.S.......S.....
15 B........###................
16 ..........#SB...............
17 ................S..........B
18 ....S.......................
19 ............................
20 ............S......S........
21 ............................
22 .......................B....
```

This sensor's closest beacon is at `2,10`, and so you know there are no beacons that close or closer (in any positions marked `#`).

None of the detected beacons seem to be producing the distress signal, so you'll need to work out where the distress beacon is by working out where it **isn't**. For now, keep things simple by counting the positions where a beacon cannot possibly be along just a single row.

So, suppose you have an arrangement of beacons and sensors like in the example above and, just in the row where `y=10`, you'd like to count the number of positions a beacon cannot possibly exist. The coverage from all sensors near that row looks like this:

```
                 1    1    2    2
       0    5    0    5    0    5
 9 ...#########################...
10 ..####B######################..
11 .###S#############.###########.
```

In this example, in the row where `y=10`, there are `26` positions where a beacon cannot be present.

Consult the report from the sensors you just deployed. **In the row where y=2000000, how many positions cannot contain a beacon?**

```elixir
defmodule Day15Part1 do
  @doc """
  To find signal covered cells we need:

  - find distance from a sensor to the closest beacon (will be used to limit
    the sensor coverage area)
  - find distance from a sensor to the given row (will be used to find how signal
    fades away moving away from sensor)
  - calculate coordinates of cells covered with signal (see separate function)
  - take only unique coordinates, exclude any beacons' coordinates from it

  Done.
  """
  def solve_for(input, row \\ 10) do
    signal_covered_cells =
      input
      |> Keyword.get(:sensors)
      |> Enum.map(fn {{s_x, _s_y} = sensor, beacon} ->
        to_beacon = Day15Shared.distance(sensor, beacon)
        to_row = Day15Shared.distance(sensor, {s_x, row})

        {sensor, {to_beacon, to_row, beacon}}
      end)
      |> Enum.filter(fn {_, {to_beacon, to_row, _}} ->
        to_row < to_beacon
      end)
      |> Enum.map(fn {sensor, {to_beacon, to_row, _}} ->
        signal_cells(sensor, to_beacon, to_row, row)
      end)
      |> List.flatten()
      |> Enum.uniq()

    beacons_positions = Keyword.get(input, :beacons) |> Map.keys()

    (signal_covered_cells -- beacons_positions)
    |> Enum.count()
  end

  @doc """
  Calculate and list coordinates of cells for the given row that are covered
  by signal of a given sensor.

  The math is the next:

  - we know the direct (vertical) distance to the row
  - we know the distance to the nearest beacon (that limit area of a sensor signal)
  - the signal fades by 2 cells every row we move away from sensor

  So, we can calc the number of signal covered cells for the given row, then take
  half of it, take `x` coordinate and find coordinates to the left of `x`, to the
  right of it, and `{x, row}` itself. This gives us a list of cells on the grid that
  are covered by signal from the given sensor.
  """
  def signal_cells({x, _y}, to_beacon, to_row, row) do
    signal_cells_n = to_beacon * 2 + 1 - to_row * 2
    to_side = div(signal_cells_n, 2)

    to_left = Enum.map(to_side..1, fn n -> {x - n, row} end)
    to_right = Enum.map(1..to_side, fn n -> {x + n, row} end)

    [to_left | [{x, row} | to_right]]
  end
end

input
|> Day15Shared.parse()
|> Day15Part1.solve_for(2_000_000)
```

## Part 2

Your handheld device indicates that the distress signal is coming from a beacon nearby. The distress beacon is not detected by any sensor, but the distress beacon must have `x` and `y` coordinates each no lower than `0` and no larger than `4000000`.

To isolate the distress beacon's signal, you need to determine its **tuning frequency**, which can be found by multiplying its `x` coordinate by `4000000` and then adding its `y` coordinate.

In the example above, the search space is smaller: instead, the `x` and `y` coordinates can each be at most `20`. With this reduced search area, there is only a single position that could have a beacon: `x=14, y=11`. The tuning frequency for this distress beacon is `56000011`.

Find the only possible position for the distress beacon. **What is its tuning frequency?**

```elixir
defmodule Day15Part2 do
  @area_limit 4_000_000

  @doc """
  Prepares and runs solution on the whole number of cores available on the
  machine. Most of the code just to split the number of rows into similar
  chunks to pass them later to `Task.async_stream`; `Stream.reject` helps
  to cleanup the output.
  """
  def solve(input) do
    cores = System.schedulers_online()
    batch_size = ceil(@area_limit / cores)

    batches =
      Enum.reduce(1..cores, {[], 0}, fn _, {batches, start} ->
        finish = start + batch_size
        finish = if finish > @area_limit, do: @area_limit, else: finish

        {[start..finish | batches], finish}
      end)
      |> elem(0)

    # HERE THE MAIN THING STARTS!
    Task.async_stream(batches, &solve_rows(input, &1))
    |> Stream.reject(&match?({:ok, nil}, &1))
    |> Enum.to_list()
  end

  @doc """
  This is the start of the main magic....

  It takes a parsed input and iterates through the given range of rows,
  trying to find if there is a signal coverage whole in it.

  Returns a number of row (y), and two numbers (x) that contain a signal
  hole in between, or just nil.
  """
  def solve_rows(input, rows) do
    Enum.reduce_while(rows, nil, fn row_n, acc ->
      case Day15Part2.find_hole(input, row_n) do
        {:hole, coord} -> {:halt, [y: row_n, x_between: coord]}
        _ -> {:cont, acc}
      end
    end)
  end

  @doc """
  To find out if there is a signal hole in the coverage for the given row (y).

  How we do this:

  - calculate radius for each sensor
  - filter out sensors that too far away from the given row (radius > distance to row)
  - calculate list of ranges (of coordinate x) of coverage signal for that given row
  - sort the ranges
  - reduce them and check if beginning of the next range is in the currently collected:
    this procedure helps us to understand if a whole range is consecutive or not

  If hole is found, we early exit from the reducing process.
  """
  def find_hole(input, to_row) do
    signal_cells =
      input
      |> Keyword.get(:sensors)
      # find radius for each sensor
      |> Enum.map(fn {sensor, beacon} ->
        radius = Day15Shared.distance(sensor, beacon)
        {sensor, radius}
      end)
      # get rid of sensors too far from the row we are calculating coverage for
      |> Enum.filter(fn {{_, y}, radius} ->
        abs(y - to_row) < radius
      end)
      # calculate coverage ranges for the given row
      |> Enum.map(fn {sensor, radius} ->
        covered_range(sensor, radius, to_row)
      end)
      # we need to sort ranges before the next step
      |> Enum.sort()

    # here we have to find if combined range (from all ranges we got on previous step)
    # is consecutive or has a hole in it
    Enum.reduce_while(signal_cells, hd(signal_cells), fn {from, to}, {min_x, max_x} ->
      if from in min_x..(max_x + 1) do
        cond do
          to > max_x -> {:cont, {min_x, to}}
          true -> {:cont, {min_x, max_x}}
        end
      else
        {:halt, {:hole, {max_x, from}}}
      end
    end)
  end

  @doc """
  To understand how many cells are covered with a signal from a given sensor we need
  to know a few things: sensor's position, it's signal radius, direct distance to the
  row.

  Let's take a look at example:

     0123456
  0  ...#...
  1* ..###..
  2  .##S##.
  3  ..###..
  4  ...#...

  Sensor position is 3,2. We're interested in row number 1. Distance from sensor
  is abs(2 - 1) = 1. We can see that signal fades according to a simple formula,
  so we have to find it and get beginning of the range on x scale and its end (by
  decreasing half of signal strength from x coordinate of sensor). Profit!
  """
  def covered_range({x, y}, radius, row_n) do
    distance_to_row = abs(y - row_n)
    signal_strength = abs(radius - distance_to_row) * 2 + 1

    to_side = div(signal_strength, 2)
    to_left = x - to_side
    to_right = x + to_side

    to_left = if to_left < 0, do: 0, else: to_left
    to_right = if to_right > @area_limit, do: @area_limit, else: to_right

    {to_left, to_right}
  end
end

input
|> Day15Shared.parse()
|> Day15Part2.solve()
```
