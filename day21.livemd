# Day 21: Monkey Math

```elixir
Mix.install([{:kino, "~> 0.8.0"}])
```

## Input

```elixir
input = Kino.Input.textarea("Please paste your input:")
```

```elixir
defmodule Day21Shared do
  def parse(input) do
    input
    |> Kino.Input.read()
    |> String.split("\n")
    |> Enum.map(fn raw ->
      [_, monkey, job] = Regex.run(~r/(\w+): (.+)$/, raw)

      op =
        if Regex.match?(~r/\d+/, job) do
          String.to_integer(job)
        else
          String.split(job, " ")
        end

      {monkey, op}
    end)
    |> Enum.into(%{})
  end
end

Day21Shared.parse(input)
```

## Part 1

The [monkeys](https://adventofcode.com/2022/day/11) are back! You're worried they're going to try to steal your stuff again, but it seems like they're just holding their ground and making various monkey noises at you.

Eventually, one of the elephants realizes you don't speak monkey and comes over to interpret. As it turns out, they overheard you talking about trying to find the grove; they can show you a shortcut if you answer their **riddle**.

Each monkey is given a **job**: either to **yell a specific number** or to **yell the result of a math operation**. All of the number-yelling monkeys know their number from the start; however, the math operation monkeys need to wait for two other monkeys to yell a number, and those two other monkeys might **also** be waiting on other monkeys.

Your job is to **work out the number the monkey named `root` will yell** before the monkeys figure it out themselves.

For example:

```
root: pppw + sjmn
dbpl: 5
cczh: sllz + lgvd
zczc: 2
ptdq: humn - dvpt
dvpt: 3
lfqf: 4
humn: 5
ljgn: 2
sjmn: drzm * dbpl
sllz: 4
pppw: cczh / lfqf
lgvd: ljgn * ptdq
drzm: hmdt - zczc
hmdt: 32
```

Each line contains the name of a monkey, a colon, and then the job of that monkey:

* A lone number means the monkey's job is simply to yell that number.
* A job like `aaaa + bbbb` means the monkey waits for monkeys `aaaa` and `bbbb` to yell each of their numbers; the monkey then yells the sum of those two numbers.
* `aaaa - bbbb` means the monkey yells `aaaa`'s number minus `bbbb`'s number.
* Job `aaaa * bbbb` will yell `aaaa`'s number multiplied by `bbbb`'s number.
* Job `aaaa / bbbb` will yell `aaaa`'s number divided by `bbbb`'s number.

So, in the above example, monkey `drzm` has to wait for monkeys `hmdt` and `zczc` to yell their numbers. Fortunately, both `hmdt` and `zczc` have jobs that involve simply yelling a single number, so they do this immediately: `32` and `2`. Monkey `drzm` can then yell its number by finding `32` minus `2`: **30**.

Then, monkey `sjmn` has one of its numbers (`30`, from monkey `drzm`), and already has its other number, `5`, from `dbpl`. This allows it to yell its own number by finding `30` multiplied by `5`: **150**.

This process continues until `root` yells a number: **152**.

However, your actual situation involves considerably more monkeys. **What number will the monkey named root yell?**

```elixir
defmodule Day21Part1 do
  @root "root"

  @doc """
  Until we the `root` monkey job is a number we have to reduce monkey jobs and find
  missing pieces for the future calculations.
  """
  def process(monkeys) do
    if is_list(monkeys[@root]) do
      monkeys
      |> reduce_jobs()
      |> process()
    else
      monkeys[@root]
    end
  end

  @doc """
  We want to reduce monkeys' jobs by going over all the monkeys and check their job
  instructions.

  Thanks for pattern-matching and guards, we can check is there are any missing pieces
  in the operations. When operation can be fullfilled (both operands are not pointing
  to other monkeys and have their numerical representation), we run the operation and
  put the result back to the data container.

  Next round, this new information can be used for another monkey job.
  """
  def reduce_jobs(monkeys) do
    Enum.reduce(monkeys, monkeys, fn
      # do the operation in case both operands are numbers (not string pointers to
      # other monkey)
      {monkey, [m1, op, m2]}, monkeys when not is_binary(m1) and not is_binary(m2) ->
        case op do
          "+" -> Map.put(monkeys, monkey, m1 + m2)
          "-" -> Map.put(monkeys, monkey, m1 - m2)
          "*" -> Map.put(monkeys, monkey, m1 * m2)
          "/" -> Map.put(monkeys, monkey, div(m1, m2))
        end

      # update operands if they are available
      {monkey, [m1, op, m2]}, monkeys ->
        m1 = if is_binary(m1) and not is_list(monkeys[m1]), do: monkeys[m1], else: m1
        m2 = if is_binary(m2) and not is_list(monkeys[m2]), do: monkeys[m2], else: m2

        Map.put(monkeys, monkey, [m1, op, m2])

      # do nothing
      _, monkeys ->
        monkeys
    end)
  end
end

input
|> Day21Shared.parse()
|> Day21Part1.process()
```
